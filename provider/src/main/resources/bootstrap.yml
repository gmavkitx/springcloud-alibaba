# 公共配置
# 注意：必须配置在bootstrap文件才生效
spring:
  application:
    name: provider
  profiles:
    # 测试及生产启动时使用-Dspring.profiles.active=dev参数进行变更
    active: dev
  cloud:
    nacos:
      config:
        # 设置编码
        encode: UTF-8
        # 默认分组
        group: DEFAULT_GROUP
        # 设置获取nacos配置的超时时间
        timeout: 3000
        # 指定获取的文件格式为yaml，需要在nacos中做对应类型设置，默认为properties
        file-extension: yaml
        # 设置表达式中的前缀，默认为 spring.application.name
        prefix: ${spring.application.name}
        # 共享的配置文件，可以存放公共的配置。不会被配置的group和file-extension影响，但会受到namespace影响
        # 也可通过shared-dataids来配置，可以参考官方文档https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Nacos-config
        ext-config[0]:
          # 唯一标识
          data-id: common.yaml
          # 组名称
          group: DEFAULT_GROUP
          # 是否支持动态刷新
          refresh: true

# 设置nacos discovery是否支持ribbon
ribbon:
  nacos:
    enabled: true

# /actuator/nacos-discovery查看服务的信息
management:
  endpoints:
    web:
      exposure:
        # 设置暴露的信息端口
        include: '*'
---
server:
  port: 8080
spring:
  profiles: dev
  cloud:
    nacos:
      config:
        # 是否开启动态配置刷新
        refresh:
          enabled: true
        # nacos config服务地址
        # 注意：如果是域名方式，80端口也要加上
        server-addr: 127.0.0.1:8848
        # 设置命名空间，为空间id，不是名字
        namespace: 284884d4-5985-49e6-8a47-5884a489bec3
      discovery:
        # nacos discovery服务地址
        server-addr: ${spring.cloud.nacos.config.server-addr}
        namespace: ${spring.cloud.nacos.config.namespace}
        # 自定义元信息
        metadata:
          version: 0.1.0
  # 数据源配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/springcloud?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: 123456
    hikari:
      # 连接的默认自动提交行为
      auto-commit: true
      # 等待池中连接的最大毫秒数,超过这个时长还没可用的连接则发生SQLException,默认值: 30000(30秒)
      connection-timeout: 30000
      # 允许连接在池中空闲的最长时间,默认值: 600000(10分钟),允许的最小值为10000毫秒(10秒)
      idle-timeout: 600000
      # 连接的最大生命周期, 超时而且没被使用则被释放, 默认值：1800000（30分钟）
      max-lifetime: 1800000
      # 最小空闲连接数,不建议配置，默认值：与maximumPoolSize相同
      minimum-idle: ${spring.datasource.hikari.maximum-pool-size}
      # 允许连接池的最大连接数，包括空闲和正在使用的连接。默认值：10, 推荐的公式：((core_count*2)+effective_spindle_count)，disks in a RAID
      maximum-pool-size: 10
      # 连接只读数据库时配置为true，保证安全
      read-only: false

# Controller/Service/Repository日志开关
kim:
  log:
    enabled: true

# Swagger相关参数配置
swagger:
  title: 生产者服务
  description: 提供给Consumer使用
  base-package: com.kimzing.provider.web
  # 匹配的基础url
  base-path: /**
  exclude-path: /error, /actuator/**

# Mybaits Plus配置，不写下面的配置，全部使用默认配置也可以运行
mybatis-plus:
  #  如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  #  如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:/mapper/*/*Mapper.xml
  # 实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.kimzing.provider.domain.po
  type-enums-package: com.kimzing.provider.domain.enums
  configuration:
    # 配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'
    #  Sequence序列接口实现类配置
    # key-generators: com.baomidou.mybatisplus.extension.incrementer.OracleKeyGenerator
  global-config:
    # 刷新mapper 调试神器
    refresh: true
    db-config:
      # 主键类型
      id-type: id_worker
      # 字段策略
      field-strategy: not_null
      # 将表名和表字段名中的下划线转换为类的驼峰
      column-underline: true
      table-underline: true
      # 全局表前缀
      # table-prefix: provider_
      # 数据库大写下划线转换
      capital-mode: false
      # 逻辑删除
      logic-not-delete-value: 0
      logic-delete-value: 1

dubbo:
  # 扫描包 refrence service
  scan:
    base-packages: com.kimzing
  # 应用配置
  application:
    id: ${spring.application.name}
    name: ${spring.application.name}
  # 注册配置
  registry:
    id: nacos
    address: nacos://127.0.0.1:8848
  # 协议配置
  protocol:
    id: dubbo
    name: dubbo
    port: 20880

